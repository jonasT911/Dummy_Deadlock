/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class java_lang_Thread */

#ifndef _Included_java_lang_Thread
#define _Included_java_lang_Thread
#ifdef __cplusplus
extern "C" {
#endif
#undef java_lang_Thread_MIN_PRIORITY
#define java_lang_Thread_MIN_PRIORITY 1L
#undef java_lang_Thread_NORM_PRIORITY
#define java_lang_Thread_NORM_PRIORITY 5L
#undef java_lang_Thread_MAX_PRIORITY
#define java_lang_Thread_MAX_PRIORITY 10L
/*
 * Class:     java_lang_Thread
 * Method:    init0
 * Signature: (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_init0
  (JNIEnv *, jobject, jobject, jobject, jstring, jlong);

/*
 * Class:     java_lang_Thread
 * Method:    getId
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_java_lang_Thread_getId
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    getState0
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_java_lang_Thread_getState0
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    countStackFrames
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_java_lang_Thread_countStackFrames
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    currentThread
 * Signature: ()Ljava/lang/Thread;
 */
JNIEXPORT jobject JNICALL Java_java_lang_Thread_currentThread
  (JNIEnv *, jclass);

/*
 * Class:     java_lang_Thread
 * Method:    holdsLock
 * Signature: (Ljava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_holdsLock
  (JNIEnv *, jclass, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    interrupt
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_interrupt
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    interrupted
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_interrupted
  (JNIEnv *, jclass);

/*
 * Class:     java_lang_Thread
 * Method:    isInterrupted
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_isInterrupted
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    isAlive
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_isAlive
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    sleep
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_sleep
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     java_lang_Thread
 * Method:    start
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_start
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_stop__
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    stop
 * Signature: (Ljava/lang/Throwable;)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_stop__Ljava_lang_Throwable_2
  (JNIEnv *, jobject, jthrowable);

/*
 * Class:     java_lang_Thread
 * Method:    suspend
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_suspend
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    resume
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_resume
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    yield
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_yield
  (JNIEnv *, jclass);

/*
 * Class:     java_lang_Thread
 * Method:    setDaemon0
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_setDaemon0
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     java_lang_Thread
 * Method:    setName0
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_setName0
  (JNIEnv *, jobject, jstring);

/*
 * Class:     java_lang_Thread
 * Method:    setPriority0
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_setPriority0
  (JNIEnv *, jobject, jint);

/*
 * Class:     java_lang_Thread
 * Method:    blockedOn
 * Signature: (Lsun/nio/ch/Interruptible;)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_blockedOn
  (JNIEnv *, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
